.menu-wrap {
  /* We want to position it as fixed that way, when we scroll down our menu won't be out of focus or 
  out of the viewport */
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1;
}

.menu-wrap .toggler {
  position: absolute;
  top: 0;
  left: 0;
  /* We want it to sit on top but it will be invisible because of the opacity */
  z-index: 2;
  opacity: 0;
  cursor: pointer;
  width: 50px;
  height: 50px;
}

.menu-wrap .hamburger {
  position: absolute;
  top: 0;
  left: 0;
  /* We want to position it just below the checkbox */
  z-index: 1;
  width: 60px;
  height: 60px;
  background: var(--primary-color);
  padding: 1rem;
  /* Since we will be adding lines inside the hamburger class, we want to center everything */
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Hamburger Line | To make the first line at the center, we want to target the div inside the 
hamburger div */
.menu-wrap .hamburger > div {
  position: relative;
  flex: none;
  width: 100%;
  height: 2px;
  background: #fff;
  display: flex;
  align-items: center;
  justify-content: center;
  /* We need to add the transition here so the animation will spin slowly */
  transition: all 0.4s ease;
}

/* Hamburger Line - Top & Bottom | We need to use the before and after to add the top and bottom line */
.menu-wrap .hamburger > div::before,
.menu-wrap .hamburger > div::after {
  content: '';
  position: absolute;
  top: -10px;
  width: 100%;
  height: 2px;
  background: #fff;
  z-index: 1;
  background: inherit;
}

/* Moves Lines Down */
.menu-wrap .hamburger > div::after {
  top: 10px;
}

/* Toggler Animation */

/* This style will only be an effect when the checkbox is checked and we also want to target the element
after the .toggler which is the .hamburger and we want to target the direct child of the .hamburger
whic is the div  */
.menu-wrap .toggler:checked + .hamburger > div {
  transform: rotate(135deg);
}

/* Turns Lines Into X */
.menu-wrap .toggler:checked + .hamburger > div::before,
.menu-wrap .toggler:checked + .hamburger > div::after {
  top: 0;
  transform: rotate(90deg);
}

/* Rotate On Hover When It's Checked */
.menu-wrap .toggler:checked:hover + .hamburger > div {
  transform: rotate(225deg);
}

/* Menu Overlay */
.menu-wrap .menu {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  visibility: hidden;
  overflow: hidden;
}

.menu-wrap .menu > div {
  background: var(--overlay-color);
  border-radius: 50%;
  /* It will not be completely circle since we're displaying it as a flex and it's affecting the width. 
  However, we can set the flex to none. */
  flex: none;
  width: 300vh;
  height: 300vh;
  /* The li's will disappear and for it to show up again, we can display it as a flex */
  display: flex;
  align-items: center;
  justify-content: center;
  /* We want to scale it to zero that way, the overlay will only show up when the .toggler is checked */
  transform: scale(0);
  transition: all 0.4s ease;
}

.menu-wrap .menu > div > div {
  text-align: center;
  max-width: 90vw;
  max-height: 100vh;
  opacity: 0;
  transition: opacity 0.4s ease;
}

.menu-wrap .menu > div > div > ul > li {
  color: #fff;
  list-style: none;
  font-size: 1.5rem;
  padding: 1rem;
}
.menu-wrap .menu > div > div > ul > li > a {
  color: inherit;
  text-decoration: none;
  transition: color 0.4s ease;
}

.menu-wrap .menu > div > div > ul > li > a:hover {
  color: var(--secondary-color);
}

/* Show Menu */
.menu-wrap .toggler:checked ~ .menu {
  visibility: visible;
}

.menu-wrap .toggler:checked ~ .menu > div {
  transform: scale(1);
  transition-duration: var(--menu-speed);
}

.menu-wrap .toggler:checked ~ .menu > div > div {
  opacity: 1;
  transition: opacity 0.4s ease 0.4s;
}